customercartMS
//customerCartAPI

@LoadBalancerClient(name ="ProductMS")

//delete
customerCartService.deleteProductFromCart(customerEmailId, productId);
		String message = environment.getProperty("CustomerCartAPI.PRODUCT_DELETED_FROM_CART_SUCCESS");
		return new ResponseEntity<String>(message,HttpStatus.OK);
    
//update
customerCartService.modifyQuantityOfProductInCart(customerEmailId, productId, quantity);
		String message = environment.getProperty("CustomerCartAPI.PRODUCT_QUANTITY_UPDATE_FROM_CART_SUCCESS");
		return new ResponseEntity<String>(message,HttpStatus.OK);
    
customerMS
//customerAPI
@LoadBalancerClient(name ="CustomerCartMS")

//addproduct
template.getForEntity("http://ProductMS/Ekart/product-api/product/"

template.postForEntity("http://CustomerCartMS/Ekart/customercart-api/products",

paymentMS
//paymentAPI
@LoadBalancerClient(name = "CustomerMS")

//List<CardDTO> cardDTOList = paymentService.getCustomerCardOfCardType(customerEmailId, cardType);
		return new ResponseEntity<List<CardDTO>>(cardDTOList,HttpStatus.OK);

//payforOrder
@CircuitBreaker(name = "paymentCircuitBreakerService",fallbackMethod = "payForOrderFallback")

Integer id = transactionDTO.getOrder().getOrderId();
		template.getForEntity("http://CustomerMS/customerorder-api/order/"+id, TransactionDTO.class);
		CardDTO cardDTO = paymentCircuitBreakerService.updateOrderAfterPayment(id, transactionDTO.getTransactionStatus());//not getting check once
